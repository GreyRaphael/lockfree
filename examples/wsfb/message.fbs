namespace Messages;

// Enum to identify the type of message
enum MessageType : byte {
    NONE = 0,
    BarData = 1,
    TickData = 2,
    ErrData = 3
}

// Table representing BarData
table BarData {
    id: int;             // int32_t id
    symbol: string;      // char symbol[6] represented as a string
    price: float;        // float price
    volume: long;        // int64_t volume
    amount: double;      // double amount
}

// Table representing TickData
table TickData {
    id: int;                 // int32_t id
    symbol: string;          // char symbol[6] represented as a string
    open: double;            // double open
    high: double;            // double high
    volumes: [int];          // int volumes[10] represented as a vector of ints
}

table ErrData{
    text: string;
}

// Union to hold either BarData or TickData
union Payload {
    BarData,
    TickData,
    ErrData
}

// Root table that encapsulates any message
table Message {
    type: MessageType;       // Type identifier
    payload: Payload;        // Payload containing the actual data
}

// Specify Message as the root type
root_type Message;