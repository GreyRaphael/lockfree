// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MESSAGE_MESSAGES_H_
#define FLATBUFFERS_GENERATED_MESSAGE_MESSAGES_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace Messages {

struct BarData;
struct BarDataBuilder;

struct TickData;
struct TickDataBuilder;

struct ErrData;
struct ErrDataBuilder;

struct Message;
struct MessageBuilder;

enum class MessageType : int8_t {
  NONE = 0,
  BarData = 1,
  TickData = 2,
  ErrData = 3,
  MIN = NONE,
  MAX = ErrData
};

inline const MessageType (&EnumValuesMessageType())[4] {
  static const MessageType values[] = {
    MessageType::NONE,
    MessageType::BarData,
    MessageType::TickData,
    MessageType::ErrData
  };
  return values;
}

inline const char * const *EnumNamesMessageType() {
  static const char * const names[5] = {
    "NONE",
    "BarData",
    "TickData",
    "ErrData",
    nullptr
  };
  return names;
}

inline const char *EnumNameMessageType(MessageType e) {
  if (::flatbuffers::IsOutRange(e, MessageType::NONE, MessageType::ErrData)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesMessageType()[index];
}

enum class Payload : uint8_t {
  NONE = 0,
  BarData = 1,
  TickData = 2,
  ErrData = 3,
  MIN = NONE,
  MAX = ErrData
};

inline const Payload (&EnumValuesPayload())[4] {
  static const Payload values[] = {
    Payload::NONE,
    Payload::BarData,
    Payload::TickData,
    Payload::ErrData
  };
  return values;
}

inline const char * const *EnumNamesPayload() {
  static const char * const names[5] = {
    "NONE",
    "BarData",
    "TickData",
    "ErrData",
    nullptr
  };
  return names;
}

inline const char *EnumNamePayload(Payload e) {
  if (::flatbuffers::IsOutRange(e, Payload::NONE, Payload::ErrData)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesPayload()[index];
}

template<typename T> struct PayloadTraits {
  static const Payload enum_value = Payload::NONE;
};

template<> struct PayloadTraits<Messages::BarData> {
  static const Payload enum_value = Payload::BarData;
};

template<> struct PayloadTraits<Messages::TickData> {
  static const Payload enum_value = Payload::TickData;
};

template<> struct PayloadTraits<Messages::ErrData> {
  static const Payload enum_value = Payload::ErrData;
};

bool VerifyPayload(::flatbuffers::Verifier &verifier, const void *obj, Payload type);
bool VerifyPayloadVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<Payload> *types);

struct BarData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef BarDataBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_SYMBOL = 6,
    VT_PRICE = 8,
    VT_VOLUME = 10,
    VT_AMOUNT = 12
  };
  int32_t id() const {
    return GetField<int32_t>(VT_ID, 0);
  }
  const ::flatbuffers::String *symbol() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SYMBOL);
  }
  float price() const {
    return GetField<float>(VT_PRICE, 0.0f);
  }
  int64_t volume() const {
    return GetField<int64_t>(VT_VOLUME, 0);
  }
  double amount() const {
    return GetField<double>(VT_AMOUNT, 0.0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ID, 4) &&
           VerifyOffset(verifier, VT_SYMBOL) &&
           verifier.VerifyString(symbol()) &&
           VerifyField<float>(verifier, VT_PRICE, 4) &&
           VerifyField<int64_t>(verifier, VT_VOLUME, 8) &&
           VerifyField<double>(verifier, VT_AMOUNT, 8) &&
           verifier.EndTable();
  }
};

struct BarDataBuilder {
  typedef BarData Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(int32_t id) {
    fbb_.AddElement<int32_t>(BarData::VT_ID, id, 0);
  }
  void add_symbol(::flatbuffers::Offset<::flatbuffers::String> symbol) {
    fbb_.AddOffset(BarData::VT_SYMBOL, symbol);
  }
  void add_price(float price) {
    fbb_.AddElement<float>(BarData::VT_PRICE, price, 0.0f);
  }
  void add_volume(int64_t volume) {
    fbb_.AddElement<int64_t>(BarData::VT_VOLUME, volume, 0);
  }
  void add_amount(double amount) {
    fbb_.AddElement<double>(BarData::VT_AMOUNT, amount, 0.0);
  }
  explicit BarDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<BarData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<BarData>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<BarData> CreateBarData(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> symbol = 0,
    float price = 0.0f,
    int64_t volume = 0,
    double amount = 0.0) {
  BarDataBuilder builder_(_fbb);
  builder_.add_amount(amount);
  builder_.add_volume(volume);
  builder_.add_price(price);
  builder_.add_symbol(symbol);
  builder_.add_id(id);
  return builder_.Finish();
}

struct BarData::Traits {
  using type = BarData;
  static auto constexpr Create = CreateBarData;
};

inline ::flatbuffers::Offset<BarData> CreateBarDataDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t id = 0,
    const char *symbol = nullptr,
    float price = 0.0f,
    int64_t volume = 0,
    double amount = 0.0) {
  auto symbol__ = symbol ? _fbb.CreateString(symbol) : 0;
  return Messages::CreateBarData(
      _fbb,
      id,
      symbol__,
      price,
      volume,
      amount);
}

struct TickData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef TickDataBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_SYMBOL = 6,
    VT_OPEN = 8,
    VT_HIGH = 10,
    VT_VOLUMES = 12
  };
  int32_t id() const {
    return GetField<int32_t>(VT_ID, 0);
  }
  const ::flatbuffers::String *symbol() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SYMBOL);
  }
  double open() const {
    return GetField<double>(VT_OPEN, 0.0);
  }
  double high() const {
    return GetField<double>(VT_HIGH, 0.0);
  }
  const ::flatbuffers::Vector<int32_t> *volumes() const {
    return GetPointer<const ::flatbuffers::Vector<int32_t> *>(VT_VOLUMES);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ID, 4) &&
           VerifyOffset(verifier, VT_SYMBOL) &&
           verifier.VerifyString(symbol()) &&
           VerifyField<double>(verifier, VT_OPEN, 8) &&
           VerifyField<double>(verifier, VT_HIGH, 8) &&
           VerifyOffset(verifier, VT_VOLUMES) &&
           verifier.VerifyVector(volumes()) &&
           verifier.EndTable();
  }
};

struct TickDataBuilder {
  typedef TickData Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(int32_t id) {
    fbb_.AddElement<int32_t>(TickData::VT_ID, id, 0);
  }
  void add_symbol(::flatbuffers::Offset<::flatbuffers::String> symbol) {
    fbb_.AddOffset(TickData::VT_SYMBOL, symbol);
  }
  void add_open(double open) {
    fbb_.AddElement<double>(TickData::VT_OPEN, open, 0.0);
  }
  void add_high(double high) {
    fbb_.AddElement<double>(TickData::VT_HIGH, high, 0.0);
  }
  void add_volumes(::flatbuffers::Offset<::flatbuffers::Vector<int32_t>> volumes) {
    fbb_.AddOffset(TickData::VT_VOLUMES, volumes);
  }
  explicit TickDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<TickData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<TickData>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<TickData> CreateTickData(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> symbol = 0,
    double open = 0.0,
    double high = 0.0,
    ::flatbuffers::Offset<::flatbuffers::Vector<int32_t>> volumes = 0) {
  TickDataBuilder builder_(_fbb);
  builder_.add_high(high);
  builder_.add_open(open);
  builder_.add_volumes(volumes);
  builder_.add_symbol(symbol);
  builder_.add_id(id);
  return builder_.Finish();
}

struct TickData::Traits {
  using type = TickData;
  static auto constexpr Create = CreateTickData;
};

inline ::flatbuffers::Offset<TickData> CreateTickDataDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t id = 0,
    const char *symbol = nullptr,
    double open = 0.0,
    double high = 0.0,
    const std::vector<int32_t> *volumes = nullptr) {
  auto symbol__ = symbol ? _fbb.CreateString(symbol) : 0;
  auto volumes__ = volumes ? _fbb.CreateVector<int32_t>(*volumes) : 0;
  return Messages::CreateTickData(
      _fbb,
      id,
      symbol__,
      open,
      high,
      volumes__);
}

struct ErrData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ErrDataBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TEXT = 4
  };
  const ::flatbuffers::String *text() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TEXT);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_TEXT) &&
           verifier.VerifyString(text()) &&
           verifier.EndTable();
  }
};

struct ErrDataBuilder {
  typedef ErrData Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_text(::flatbuffers::Offset<::flatbuffers::String> text) {
    fbb_.AddOffset(ErrData::VT_TEXT, text);
  }
  explicit ErrDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ErrData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ErrData>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ErrData> CreateErrData(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> text = 0) {
  ErrDataBuilder builder_(_fbb);
  builder_.add_text(text);
  return builder_.Finish();
}

struct ErrData::Traits {
  using type = ErrData;
  static auto constexpr Create = CreateErrData;
};

inline ::flatbuffers::Offset<ErrData> CreateErrDataDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *text = nullptr) {
  auto text__ = text ? _fbb.CreateString(text) : 0;
  return Messages::CreateErrData(
      _fbb,
      text__);
}

struct Message FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef MessageBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TYPE = 4,
    VT_PAYLOAD_TYPE = 6,
    VT_PAYLOAD = 8
  };
  Messages::MessageType type() const {
    return static_cast<Messages::MessageType>(GetField<int8_t>(VT_TYPE, 0));
  }
  Messages::Payload payload_type() const {
    return static_cast<Messages::Payload>(GetField<uint8_t>(VT_PAYLOAD_TYPE, 0));
  }
  const void *payload() const {
    return GetPointer<const void *>(VT_PAYLOAD);
  }
  template<typename T> const T *payload_as() const;
  const Messages::BarData *payload_as_BarData() const {
    return payload_type() == Messages::Payload::BarData ? static_cast<const Messages::BarData *>(payload()) : nullptr;
  }
  const Messages::TickData *payload_as_TickData() const {
    return payload_type() == Messages::Payload::TickData ? static_cast<const Messages::TickData *>(payload()) : nullptr;
  }
  const Messages::ErrData *payload_as_ErrData() const {
    return payload_type() == Messages::Payload::ErrData ? static_cast<const Messages::ErrData *>(payload()) : nullptr;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_TYPE, 1) &&
           VerifyField<uint8_t>(verifier, VT_PAYLOAD_TYPE, 1) &&
           VerifyOffset(verifier, VT_PAYLOAD) &&
           VerifyPayload(verifier, payload(), payload_type()) &&
           verifier.EndTable();
  }
};

template<> inline const Messages::BarData *Message::payload_as<Messages::BarData>() const {
  return payload_as_BarData();
}

template<> inline const Messages::TickData *Message::payload_as<Messages::TickData>() const {
  return payload_as_TickData();
}

template<> inline const Messages::ErrData *Message::payload_as<Messages::ErrData>() const {
  return payload_as_ErrData();
}

struct MessageBuilder {
  typedef Message Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_type(Messages::MessageType type) {
    fbb_.AddElement<int8_t>(Message::VT_TYPE, static_cast<int8_t>(type), 0);
  }
  void add_payload_type(Messages::Payload payload_type) {
    fbb_.AddElement<uint8_t>(Message::VT_PAYLOAD_TYPE, static_cast<uint8_t>(payload_type), 0);
  }
  void add_payload(::flatbuffers::Offset<void> payload) {
    fbb_.AddOffset(Message::VT_PAYLOAD, payload);
  }
  explicit MessageBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Message> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Message>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Message> CreateMessage(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    Messages::MessageType type = Messages::MessageType::NONE,
    Messages::Payload payload_type = Messages::Payload::NONE,
    ::flatbuffers::Offset<void> payload = 0) {
  MessageBuilder builder_(_fbb);
  builder_.add_payload(payload);
  builder_.add_payload_type(payload_type);
  builder_.add_type(type);
  return builder_.Finish();
}

struct Message::Traits {
  using type = Message;
  static auto constexpr Create = CreateMessage;
};

inline bool VerifyPayload(::flatbuffers::Verifier &verifier, const void *obj, Payload type) {
  switch (type) {
    case Payload::NONE: {
      return true;
    }
    case Payload::BarData: {
      auto ptr = reinterpret_cast<const Messages::BarData *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Payload::TickData: {
      auto ptr = reinterpret_cast<const Messages::TickData *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Payload::ErrData: {
      auto ptr = reinterpret_cast<const Messages::ErrData *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyPayloadVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<Payload> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (::flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyPayload(
        verifier,  values->Get(i), types->GetEnum<Payload>(i))) {
      return false;
    }
  }
  return true;
}

inline const Messages::Message *GetMessage(const void *buf) {
  return ::flatbuffers::GetRoot<Messages::Message>(buf);
}

inline const Messages::Message *GetSizePrefixedMessage(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<Messages::Message>(buf);
}

inline bool VerifyMessageBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Messages::Message>(nullptr);
}

inline bool VerifySizePrefixedMessageBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Messages::Message>(nullptr);
}

inline void FinishMessageBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Messages::Message> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedMessageBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Messages::Message> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Messages

#endif  // FLATBUFFERS_GENERATED_MESSAGE_MESSAGES_H_
